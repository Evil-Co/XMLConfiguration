{"name":"Xmlconfiguration","tagline":"Allows to create configuration parsers in Java lightning fast.","body":"# XML Configuration for Java 7+\r\nThis library allows you to easily created XML based configurations in Java via annotations. The following examples will show you the basics of how to transform your class into a configuration file.\r\n\r\n## Preparation\r\nFor reading and/or writing a configuration file you will need to create a storage class which will hold the actual data.\r\n\r\nEach field you would like to serialize needs to be annotated with the `@Property` annotation with an element name as it's argument (as example \"testVariable\").\r\n```\r\n@Configuration\r\nclass ApplicationConfiguration {\r\n\t\r\n\t@Property (\"testFeatureEnabled\")\r\n\tpublic Boolean testFeatureEnabled = false;\r\n\t\r\n\tpublic ApplicationConfiguration () { }\r\n}\r\n```\r\n\r\nPlease note that all fields need to be visible in order to be \"seen\" by the library and all primitive types need to use their respective class version to allow proper un-marshalling. Additionally a\r\ndefault no-argument constructor needs to be available in all configuration storage classes.\r\n\r\n## Types\r\nThe library by default allows a lot of different types including most primitives, objects (e.g. classes which contain properties which are annotated with `@Property`), Lists (please note that lists\r\nmight require an `@PropertyWrapper` annotation to produce proper results and Maps (the rules mentioned for Lists do apply).\r\n\r\nAs example you are able to wrap a list with the following annotation sequence:\r\n```\r\n\t// ...\r\n\t@Property (\"item\")\r\n\t@PropertyWrapper (\"testList\")\r\n\tpublic List<String> testList = new ArrayList<> ();\r\n\t// ...\r\n```\r\n\r\nThe above example will create an element called `<testList>` which will contain all list items wrapped in `item` elements. The same applies to map elements. Please note that extensions of lists might\r\nrequire an annotation called `@InnerType` in order to allow the library to properly decode the contents (this can also be used to declare a specific implementation of X to be used to fill a list or map).\r\nPlease also note that map indexes are currently limited to strings.\r\n\r\n## Comments\r\nAdditionally to the default features the library also allows you to add comments to your properties to help users to understand the property. To add a comment in front of a variable you will need to add\r\nan annotation called `@Comment` to your property:\r\n```\r\n\t// ...\r\n\t@Property (\"testVariable\")\r\n\t@Comment (\"This is a test\")\r\n\tpublic boolean testVariable = true;\r\n\t// ...\r\n```\r\n\r\nFor more advanced usage of this library please refer to the sourcecode on GitHub.\r\n\r\n## Maven\r\n```\r\n<dependency>\r\n\t<groupId>com.evilco.configuration</groupId>\r\n\t<artifactId>xml</artifactId>\r\n\t<version>1.0-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\nAdditionally you might need to add our repository to your repository list:\r\n```\r\n<repository>\r\n\t<id>evil-co</id>\r\n\t<url>http://nexus.evil-co.org/content/repositories/free-snapshots/</url>\r\n\r\n\t<snapshots>\r\n\t\t<enabled>true</enabled>\r\n\t</snapshots>\r\n</repository>\r\n```\r\n\r\n## Bugs & Feature Requests\r\nYou can submit bug reports and feature requests in our [Bugtracker](https://evilco.atlassian.net/browse/XCNF).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}